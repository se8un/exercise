/*
Все методы итератора принимают функцию обратного вызова, которая может быть предварительно определена, или выражение функции, или функцию стрелки. 

.map () выполняет один и тот же код для каждого элемента в массиве и возвращает новый массив с обновленными элементами.

.filter () проверяет каждый элемент в массиве, чтобы увидеть, соответствует ли он определенным критериям, и возвращает новый массив с элементами, которые возвращают истинность критериев.

.splice() Отсчитываемое от нуля место в массиве, из которого следует начать удаление элементов. Удаляет элементы из массива и при необходимости вставляет на их место новые элементы, возвращая удаленные элементы. !splice изменяет исходный массив!

.find/filter(func) – фильтрует элементы через функцию и отдаёт первое/все значения, при прохождении которых через функцию возвращается true.

.findIndex() возвращает индекс первого элемента массива, который удовлетворяет условию в функции обратного вызова. Он возвращает -1, если ни один из элементов массива не удовлетворяет условию.
findIndex похож на find, но возвращает индекс вместо значения.

.reduce () выполняет итерацию по массиву, принимает значения элементов и возвращает одно значение.
	Сумма всех элементов массива.
	Перевести числа в строки.
	Сглаживание массива, из двумерного в одномерный.
	Найти наибольшее число в массиве.
	Извлечь конкретные данные из массива, например id объекта.

.forEach () используется для выполнения одного и того же кода для каждого элемента в массиве, но не 		изменяет массив и возвращает undefined.
	цикл for in с массивами выводит индексы
	цикл for of с массивами выводит имена
	у массивов есть forEach() заменяет работу с циклом + более производителен

*/

//_/_/_/

// сравнить два массива и узнать общее число через вложеный цикл
const myArray = [6, 19, 20]
const yourArray = [19, 81, 2]
for (let i = 0; i < myArray.length; i++) {
  for (let j = 0; j < yourArray.length; j++) {
    if (myArray[i] === yourArray[j]) {
      console.log('Общее число: ' + yourArray[j])
    }
  }
}

//_/_/_/

// скопировать в новый массив с номера индекса вкл, до конца.
let arr = [22, 33, 44, 55, 66, 77, 88, 99]
let sl = arr.slice(3)
console.log(arr) // arr не изменился
console.log(sl) // [ 55, 66, 77, 88, 99 ]

//_/_/_/_/_/_/_/_/_/_/_/ Spread ... _/_/_/_/_/_/_/_/_/_/_/_/
//Синтаксис оператора Spread ( ...) позволяет развернуть итерацию, такую ​​как выражение массива или строка

const a = [3, 4, 5]
const b = ['c', 'd', 'e']

//объединение
const c = [...a, ...b]
console.log(c) // [ 3, 4, 5, 'c', 'd', 'e' ]

// clone
const d = [...b]
console.log(d) //[ 'c', 'd', 'e' ]
d[0] = 88
console.log(d) //[ 88, 'd', 'e' ]
console.log(b) //[ 'c', 'd', 'e' ] b не изменился

//string -> array
const e = [...'hello'] //[ 'h', 'e', 'l', 'l', 'o' ]
console.log(e)

//set -> array
const f = [...new Set([1, 1, 2, 3, 4, 2])] //[ 1, 2, 3, 4 ]
console.log(f)

function test() {
  // console.log(arguments) //[Arguments] { '0': 3, '1': 4, '2': 5, '3': 6, '4': 7 }
  console.log(...arguments) //3 4 5 6 7
}
test(3, 4, 5, 6, 7)

//node list
//querySelectorAll
let p = document.querySelectorAll('p')
console.dir(p)
console.log(...p) //[p, p, p, p, p, p, p]

//_/_/_/
