/* CSS переводится как «Каскадные таблицы стилей» */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* CSS: Наследование стилей
<div style="font-size: 20px;">
    Размер шрифта, которым написан этот текст — 20 пикселей.
    <p>Вложенный параграф также будет иметь размер шрифта 20 пикселей.</p>
</div> */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* CSS: Тег style
<style>
  div {
    font-size: 20px;
  }

  p {
    font-size: 10px;
  }
</style>

<div>
  Этот текст будет с размером шрифта 20 пикселей

  <p>Вложенный параграф будет иметь размер шрифта 10 пикселей</p>
</div> */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* Базовые стили тегов
по умолчанию браузеры выводят заголовок <h1></h1> с размером шрифта 24 пикселя. */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* CSS: Классы
задать стиль не для всех элементов , а только для тех, у которых указан необходимый класс.
	это правило сработает для всех элементов, у которых атрибут класс равен paragraph. */

/* // HTML
<p class="paragraph">Текст нашего параграфа. с помощью класса paragraph в CSS будут устанавливаться свойства для этого блока текста</p> */

/* CSS */
.paragraph {
  color: #333333;
  /* Правило color устанавливает цвет текста. */
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Селекторы

<p class="text-bold">Жирный текст внутри параграфа</p>
<div class="text-bold">Ещё один текст внутри простого блочного элемента. Так как у него тоже есть класс text-bold, то он будет с жирным начертанием</div>

.text-bold {
  font-weight: bold;
} */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* CSS позволяет выровнять текст, используя свойство text-align с тремя основными значениями:

left — по левому краю. Используется по умолчанию.
center — по центру.
right — по правому краю.
<p class="left">Текст по левому краю</p>
<p class="center">Текст по центру</p>
<p class="right">Текст по правому краю</p> */

.left {
  text-align: left;
}

.center {
  text-align: center;
}

.right {
  text-align: right;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* Для управления насыщенностью шрифта используется правило font-weight, у которого в качестве значения чаще всего выступают параметры normal, устанавливающий стандартную насыщенность шрифта, и bold, устанавливающий жирное начертание шрифта (эффект похож на использование тегов strong и b в HTML).

<p class="bold">Текст с жирным начертанием шрифта</p> */

.bold {
  font-weight: bold;
}

/* В качестве значения свойства font-weight могут использоваться 100, 200, 300, 400, 500, 600, 700, 800, 900. 
Текстовые значения свойства соотносятся с числовыми следующим образом:
400 — normal
700 — bold 

Если шрифт, который используется на вашем сайте, поддерживает только эти два значения, то все другие он будет приводить именно к ним. То есть при использовании значения выше 500 всегда будет выставляться обычное жирное начертание, вне зависимости от того, какое именно значение будет указано.

В таком случае для большинства стандартных шрифтов значения от 100 до 500 будут приравнены к normal, а от 600 до 900 к bold.*/

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* Для выделения цитат или терминов часто используют курсивное написание. Для этих целей в CSS существует правило font-style, имеющее три значения:

normal — обычный вывод текста.
italic — курсивное начертание
oblique — косое начертание
Можно заметить, что значения italic и oblique вывелись одинаковым образом. Почему? Дело в том, что при значении italic в шрифте, который используется на странице, ищутся специальные курсивные символы, а при значении oblique берётся текущий шрифт и наклоняется.

Если в шрифте отсутствуют символы, необходимые для italic, то автоматически правило ведёт себя также, как и oblique, в связи с чем italic является распространённым вариантом использования свойства font-style.

<p class="italic">Курсивный текст</p> */

.italic {
  font-style: italic;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Капитель Капитель — вид строчных букв, размер которых совпадает (или приближен) к размеру заглавных букв.;
Для установки капители используется свойство font-variant с одним из двух основных значений:

normal — нормальное написание текста
small-caps — капитель

<p class="small-capitals">
Lorem ipsum dolor sit amet consectetur, adipisicing elit.
</p> */

.small-capitals {
  font-variant: small-caps;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Горизонтальная черта
Для такого оформления используется свойство text-decoration с тремя основными свойствами:

underline — Подчёркивание текста
line-through — Перечёркивание текста
overline — Надчёркивание текста
Чтобы отменить подчёркивание у ссылок используется значение text-decoration: none;. */

.line {
  text-decoration: underline;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* CSS: Межстрочный интервал
Межстрочный интервал (интерлиньяж) — важный пункт при работе с текстом. Данный параметр определяет, сколько пространства будет между строчками. 
Для установки межстрочного расстояния используется правило line-height. В качестве значения используется число.*/

.line-height {
  font-size: 24px;
  line-height: 36px;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Шрифт
чтобы указать шрифт, используется правило font-family, позволяющее выбрать один или несколько шрифтов,
которые будут использоваться в документе.  */

.new-font {
  font-family: Arial, Futura;
}

/* Шрифты подключаются из тех, которые установлены в вашей системе. По этой причине стоит выбирать «распространённые шрифты», так как у другого пользователя их может не быть. Помимо этого возможно подключать шрифты со сторонних сервисов, таких как Google Fonts, или загружать их непосредственно на ваш сервер, на котором расположен сайт.

Наиболее распространёнными шрифтами являются:
* Times New Roman
* Arial
* Tahoma
* Verdana
* Courier New

С большей долей вероятности эти шрифты будут установлены и в системе у другого пользователя. Если шрифтов, указанных в свойстве font-family, на компьютере нет, то будет использован шрифт по умолчанию, заданный в настройках браузера.

При подключении стилей хорошей практикой является добавление универсального семейства шрифта в правило font-family. Таких семейств на данный момент 5:

	serif — шрифты с засечками (антиквы). Ярким представителем таких шрифтов является Times New Roman.

	sans-serif — шрифты без засечек (гротеск). Наиболее знакомыми такими шрифтами являются Arial и Verdana.

	cursive — курсивные шрифты.

	fantasy — декоративные шрифты. Это семейство используется реже всего. Дело в том, что декоративные шрифты слишком разные, чтобы они были взаимозаменяемые.

	monospace — моноширинные шрифты. К ним относятся шрифты, в которых все символы имеют одинаковую ширину. Очень часто их используют программисты в текстовых редакторах. */

.new-font {
  font-family: Arial, Futura, sans-serif;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Обобщённое правило для шрифтов
Удобным способом задать свойства для шрифта является использование правила font, которое позволяет указать:

font-style
font-variant
font-weight
font-size / line-height (эти два правила записываются через слэш)
font-family
Шесть разных правил внутри одного! Это помогает сократить CSS код и улучшить его читабельность. Обязательными из них являются font-size и font-family. Остальные можно не указывать. */

/* font: italic bold 24px Arial, sans-serif;
Обратите внимание на порядок использования значений внутри свойства font. Вначале идут стилистические правила, затем размер шрифта и его межстрочный интервал и потом семейство шрифта.  */

.bold-text {
  font: italic bold 24px Verdana, sans-serif;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Базовые правила типографики;

1 Используйте стандартные шрифты
Arial, Verdana, Tahoma, Times New Roman. Большинство из этих шрифтов уже есть в компьютере пользователей, они привычны и легко читаются. Избегайте причудливых шрифтов (например Comic Sans). 

2 Используйте не больше двух шрифтов на странице
Это поможет пользователю быстрее ориентироваться на странице. Стандартным случаем является использование одного шрифта для заголовков и другого для текста.

3 Используйте достаточный размер шрифта
Это понятие двойственное, но не следует использовать основной текст со шрифтом меньше 14 пикселей. Если размер шрифта будет меньше, то чтение с мобильных устройств будет пыткой.

4 Используйте достаточный межстрочный интервал
Самым распространённым межстрочным интервалом является значение в 150% от размера шрифта. Если текст размером 14 пикселей, то межстрочный интервал желательно установить не менее 21 пикселя.

5 Выравнивайте текст по левому краю
Не стоит писать весь текст с выравниваем по центру или правому краю. При чтении таких текстов глаза устают намного быстрее, так как глаз теряет точку опоры, откуда начинается текст. Используйте нестандартное выравнивание только для небольших участков текста (например, заголовки или цитаты). */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Рамки;
border «рисует» вокруг блока границу с заданным цветом. 
Для этого принимаются 3 значения:
	ширина границы;
	тип границы;
	цвет границы.
Наиболее распространёнными типами рамок являются:
solid (сплошная)
dotted (пунктирная)
dashed (штриховая) */

.border-bold {
  border: 5px solid #2196f3;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Фон;
Для установки фона блоку используется свойство background-color, значением которого является цвет фона. */

.background {
  background-color: #2196f3;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Внутренние отступы;
Внутренний отступ указывается с помощью правила padding, которое может принимать 4 значения:

отступ сверху;
отступ справа;
отступ снизу;
отступ слева. */

.gray-background {
  padding: 20px 20px 20px 20px;
}

/* Помимо такой записи для удобства существуют сокращённые записи этих правил:

Если указать два значения, то первое будет использоваться для отступов по вертикали (сверху и снизу), а второе по горизонтали (справа и слева).
Если указать только одно значение, то оно будет использовано одновременно для всех сторон.
Если указать три значения, то они будут использоваться для отступа сверху, по горизонтали и снизу. */

.gray-background {
  padding: 20px;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Внешние отступы;
Если расположить два блока (div, article, section и так далее) друг под другом, то между ними не будет отступов. Это усложняет ориентирование на странице, так как между такими блоками может не быть визуальной разницы (особенно, если они имеют одинаковое значение background).

Для того, чтобы дать пространство блокам, используются внешние отступы. Внешний отступ указывается с помощью правила margin и принимает значения в таком же порядке, как и padding:

отступ сверху;
отступ справа;
отступ снизу;
отступ слева. */

.gray-block {
  margin: 10px 0 10px 0;
}

/* Также, как у внутренних отступов, для удобства существуют сокращённые записи этих правил:

Если указать два значения, то первое будет использоваться для отступов по вертикали (сверху и снизу), а второе по горизонтали (справа и слева).
Если указать только одно значение, то оно будет использовано одновременно для всех сторон. */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Высота и ширина блока;
Для управления высотой и шириной блочных элементов используются правила width и height, */

.square {
  width: 100px;
  height: 100px;
  background-color: #000;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Блочная модель;
При добавлении стилей к блокам вы можете заметить, что одни стили взаимодействуют с другими. Например, правило border взаимодействует с padding — границы учитывают внутренний отступ и отодвигаются от контента внутри. Также свойство padding увеличивает ширину и высоту блока, как бы «растягивая его».

Данные особенности называются блочной моделью (box-model). По этой модели браузеры «рисуют» блок, наслаивая правила друг на друга. */

/* 
* цвет фона #FA7268
* цвет текста белый #FFFFFF
* ширина блока: 230 пикселей
* высота блока 25 пикселей
* внутренние отступы 20 пикселей
* внешние отступы 10 пикселей
* рамка шириной 2 пикселя, сплошная. Цвет #9C27B0
* размер шрифта 20 пикселей */

/* <style> */
.card-hello {
  background-color: #fa7268;
  color: #ffffff;
  width: 230px;
  height: 25px;
  padding: 20px;
  margin: 10px;
  border: 2px solid #9c27b0;
  font-size: 20px;
} /* 
</style>

 <div class="card-hello">
    Текст, который будет выведен на сером.
</div> */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Каскадность
Стили браузера по умолчанию (у тега p по умолчанию есть отступы).
Стили, указанные у класса cascade.
Стили, указанные в теге p.

<p class="cascade">1234567890</p> */

.cascade {
  font-size: 25px;
}

p {
  padding: 15px;
}

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* CSS: Приоритет стилей
Есть правила, определяющие приоритеты стилей из разных источников 

По степени важности список выглядит следующим образом:
Стили в атрибуте тега
Стили в отдельном файле
Стили по умолчанию, которые добавляет браузер

У селекторов, каждому селектору даётся «вес»:
Селектор по тегу: 1
Селектор по классу: 10
Селектор по ID: 100
Стиль в атрибуте тега: 1000

<style> */
.blue {
  color: blue;
}

#red-block {
  color: red;
}
/* </style>
<div class="blue" id="red-block" style="color: white;">
	Текст Приоритет стилей
</div>

селектор по классу (.blue) имеет приоритет 10, а селектор по id (#red-block) имеет приоритет 100. Значит, правило для id #red-block «перебьёт» правило для класса .blue. Помимо этого у нас есть инлайн стиль style="color: white;", который имеет «вес» 1000, а это значит, что он обладает наивысшим приоритетом.
Таким образом текст внутри блока будет белым. */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Префиксы;
префиксы — небольшие дополнения для правил, которые помогают браузеру увидеть, что мы хотим использовать новое правило. Также префиксы необходимы для поддержки старых браузеров, в которых по умолчанию может не быть правила.

Одним из примеров правила, которое ранее требовало использования префиксов — box-shadow, позволяющее добавить тень к блочному элементу. Если при использовании box-shadow необходима поддержка старых браузеров, то запись принимает следующий вид: */

.block-shadow {
  -webkit-box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);
  -moz-box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);
  box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);
}

/* У правил появились префиксы -webkit- для браузеров Google Chrome и Safari, а также префикс -moz- для браузера Firefox. Теперь можно быть уверенным, что даже в старых браузерах у нужного нам блока появится тень.

Чтобы узнать, стоит ли использовать префиксы для того или иного правила, можно воспользоваться сервисом Can I use https://caniuse.com/. Он покажет поддержку правила браузерами и подскажет, если необходимо добавить префиксы. */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Единицы измерения;
Пиксель — наименьший элемент экрана, который выводит цвет.
Пикcели являются абсолютной единицей измерения в CSS. Что же это значит? Это значит, что вне зависимости от размера экрана размер, обозначенный в пикселях сохранится. Если мы указали отступ в 30 пикселей, то он будет таким и на телефоне, и на телевизоре с диагональю в 102 дюйма.
Помимо неё существуют ещё сантиметры, миллиметры, дюймы, но они давно ушли на последние роли и их не используют.

В противовес абсолютным единицам измерения существуют относительные. Они рассчитываются, исходя из названия, относительно чего-то. Основной относительной единицей измерения являются проценты. Они высчитывают значения, исходя из размеров, указанных в ближайшем родительском блоке. Например: */

/* <style> */
.big-text {
  font-size: 45px;
  /* Здесь значение указано абсолютное и всегда будет равняться 45 пикселям */
}

.very-big-text {
  font-size: 150%;
  /* Относительное значение. В данном случае высчитывается от значения в классе .big-text и будет равно 67.5 пикселей. При изменении значения в классе .big-text данное значение будет пересчитано автоматически */
}
/* </style> */

/* <div class="big-text">
    <p>Здесь большой текст</p>

    <div class="very-big-text">
        <p>А здесь текст на 50% крупнее большого текста</p>
    </div>
</div> */
/* Помимо процентов к относительным единицам измерения также относятся:

em. Похожи на процент, только указывают, на сколько больше должно быть значение.
rem. Считаются относительно не родительского блока, а значения, указанного у тега html. */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Цветовые модели;
Для определения цвета с помощью RGB используется написание rgb(r, g, b). В скобках через запятую указываются пропорции цветов. Каждый цвет представляет собой число от 0 до 255, где 0 — отсутствие цвета, а 255 — максимальное количество. В таком написании белый цвет текста можно получить, используя значение rgb(255, 255, 255), а чёрный rgb(0, 0, 0):

color: rgb(255, 255, 255); // Белый цвет
color: rgb(0, 0, 0) // Чёрный цвет

можно представить числа от 0 до 255 в шестнадцатеричной системе счисления 
color: #FFFFFF; // Белый цвет
color: #000000; // Чёрный цвет

В модель RGB также возможно добавить степень прозрачности. В графическом дизайне такой параметр называется «альфа» каналом. Для использования альфа-канала необходима запись rgba, где a — alpha channel. Параметр прозрачности принимает числа от 0 до 1, где полностью прозрачный цвет обозначается нулём, а полностью непрозрачный — единицей.

color: rgba(255, 255, 255, 0.5) // Полупрозрачный белый цвет
color: rgba(0, 0, 0, 1) // Непрозрачный чёрный цвет */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Медиа запросы
Чтобы указать правила для конкретного разрешения экрана, используются медиа-запросы — специальные конструкции, помогающие браузеру определить, стоит использовать правила или нет. */
@media (условия) {
  /* правила */
}

/* Используем условие max-width, чтобы определить, до какого значения ширины использовать правила: */
/* На устройствах, с шириной экрана до 1000 пикселей цвет фона у тега body будет голубым. */
@media (max-width: 1000px) {
  body {
    background-color: blue;
  }
}

/* Полезным условием является также orientation. Оно помогает указать для какой ориентации экрана использовать правила. Например, для портретной (portrait) ориентации (когда просто держим телефон в руках) у нас блоки должны занимать всю ширину экрана. В альбомной (landscape) (когда переворачиваем телефон) по 2 блока в одной строке: */
@media (orientation: landscape) {
  .blocks {
    /* Правила для блоков */
  }
}

@media (orientation: portrait) {
  .blocks {
    /* Правила для блоков */
  }
}
/* Теперь мы имеем различные правила для разных ориентаций устройств. */

/* Всю информацию по доступным условиям можно найти в официальном стандарте W3C
https://www.w3.org/TR/css3-mediaqueries/ */

/* белый цвет текста у параграфов с классом white-text-mobile для устройств с шириной экрана не больше 750 пикселей */
/* <p class="white-text-mobile">Lorem ipsum dolor sit amet consectetur, adipisicing elit.</p> */
/* <style>    */
@media (max-width: 750px) {
  .white-text-mobile {
    color: #ffffff;
  }
}
/* </style> */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Анимация;
показан базовый принцип анимации в CSS на основе keyframes. Для примера, сделаем анимацию текста — цвет текста меняется с голубого на красный.
Для того, чтобы задать анимацию, используется правило @keyframes и название анимации: */
@keyframes color-change {
  /* // Внутри будет наша анимация */
}

/* Название анимации может быть любым. Вы его выбираете самостоятельно. 
В последствии именно по этому названию свойство animation будет знать, какую именно анимацию необходимо воспроизвести.
Внутри keyframes необходимо указать различные временные промежутки, в которых будут происходить изменения. Например, на старте (0% завершённости анимации) у нас будет голубой текст, в середине анимации (50%) — красный, и в конце (100%) — возвращаем голубой цвет. */
@keyframes color-change {
  0% {
    color: blue;
  }
  50% {
    color: red;
  }
  100% {
    color: blue;
  }
}
/* Теперь необходимо применить созданную нами анимацию к тексту на странице.
Для этого используется правило animation с тремя основными значениями:
	Название анимации
	Длительность анимации. Указывается в секундах (1s, 2s, 3s и так далее)
	Бесконечная анимация или нет (если бесконечная, то указывается параметр infinite) */

.color-change {
  animation: color-change 3s infinite;
}
/* Осталось создать параграф с необходимым классом, и анимация начнёт работать. */

/* <style> */
@keyframes black-white {
  0% {
    color: black;
  }
  100% {
    color: white;
  }
}
.black-white {
  animation: black-white 3s;
}
/* </style> */
/* <p class="black-white">Lorem ipsum dolor sit amet consectetur, adipisicing elit.</p> */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Переменные */
/* Переменная создаётся с помощью конструкции --имя-переменной.  */

/* В качестве значения зададим цвет, который можно использовать внутри проекта: */
--main-color: #000000;

/* Переменные наследуются также, как и простые свойства CSS, поэтому их необходимо указывать у конкретного тега, и переменная будет доступна у всех элементов внутри этого тега. */

/* Если переменную нужно «встроить» глобально и использовать в любом месте CSS-файла, то используется специальный синтаксис :root, а внутри него записываются все нужные переменные. */
:root {
  --main-color: #000000;
}
/* Теперь можно использовать переменную в любой части нашего CSS-кода. */

/* Это делается с помощью специальной конструкции var(--имя-переменной). */
:root {
  --main-color: #000000;
}

.news-block {
  background-color: var(--main-color);
}

.left-sidebar {
  background-color: var(--main-color);
}
/* Теперь если мы хотим установить другой оттенок чёрного цвета, достаточно изменить только значение переменной --main-color, и все изменения автоматически применятся к блокам с классами .news-block и .left-sidebar */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */

/* css: Позиционирование;

С помощью правила position мы можем «выдернуть» блок из вёрстки и расположить так, как удобно. Основные значения у свойства position следующие:

relative (относительное позиционирование). Позволяет изменить расположение элемента относительно того места, где он был расположен до применения свойства. При этом, то место на странице, которое блок занимал ранее, останется. То есть другие блоки не будут вставать на место, где блок располагался до применения правила position.
absolute (абсолютное позиционирование). «Вынимает» блок из HTML вёрстки и изменяет его расположение относительно левого верхнего угла cтраницы (или родительского элемента, если у него есть свойство position в значении fixed, absolute, relative, или sticky). В отличии от relative, место, где располагался absolute блок, будет удалено, и другие блоки смогут занять это место.
fixed. Также, как и absolute, данное правило извлечёт блок из HTML вёрстки и расположит его в левом верхнем углу. Отличием от абсолютного позиционирования является то, что блок будет «следовать за страницей» и всегда находится в зоне видимости пользователя. Это удобно для создания меню, которые должны следовать за пользователем.
Для управления расположением используются 4 правила CSS: top, right, left и bottom, значением которых являются координаты (например, в пикселях), где будет расположен блок. */

/* <style> */
.absolute-position {
  position: absolute;
  top: 100px;
  left: 100px;
  color: #f99157;
}
/* </style> */
/* <div class="absolute-position">Блок с абсолютным позиционированием, который будет расположен на расстоянии 100 пикселей от верха и 100 пикселей от левого края страницы</div> */

/* _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/ */
